/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
var ChatConfigComponent = /** @class */ (function () {
    function ChatConfigComponent() {
        this.text = 'Select theme';
        this.themeChange = new EventEmitter();
        this.themes = ['blue', 'grey', 'red'];
    }
    /**
     * @param {?} theme
     * @return {?}
     */
    ChatConfigComponent.prototype.setTheme = /**
     * @param {?} theme
     * @return {?}
     */
    function (theme) {
        this.theme = theme;
        this.themeChange.emit(this.theme);
    };
    ChatConfigComponent.decorators = [
        { type: Component, args: [{
                    selector: 'chat-config',
                    template: "\n    <div class=\"chat-config\">\n      {{text}}\n      <button *ngFor=\"let item of themes\"\n              class=\"btn\" [class.btn-active]=\"item === theme\"\n              (click)=\"setTheme(item)\">\n        {{item}}\n      </button>\n    </div>\n  ",
                    styles: ["\n    .chat-config {\n      padding: 20px;\n    }\n    .btn {\n      padding: 5px;\n      margin: 0px 2px;\n      border: 1px solid #dedede;\n      outline: none;\n    }\n    .btn-active {\n      border: 1px solid #a0a0a0;\n    }\n    .btn:focus {\n      border: 1px solid #333;\n    }\n  "]
                }] }
    ];
    ChatConfigComponent.propDecorators = {
        theme: [{ type: Input }],
        text: [{ type: Input }],
        themeChange: [{ type: Output }]
    };
    return ChatConfigComponent;
}());
export { ChatConfigComponent };
if (false) {
    /** @type {?} */
    ChatConfigComponent.prototype.theme;
    /** @type {?} */
    ChatConfigComponent.prototype.text;
    /** @type {?} */
    ChatConfigComponent.prototype.themeChange;
    /** @type {?} */
    ChatConfigComponent.prototype.themes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC1jb25maWcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1jaGF0LXdpZGdldC1yYXNhLyIsInNvdXJjZXMiOlsibGliL2NoYXQtY29uZmlnL2NoYXQtY29uZmlnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQTtBQUV0RTtJQUFBO1FBZ0NrQixTQUFJLEdBQUcsY0FBYyxDQUFBO1FBQ3BCLGdCQUFXLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUE7UUFFN0QsV0FBTSxHQUFHLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQTtJQUt6QyxDQUFDOzs7OztJQUpRLHNDQUFROzs7O0lBQWYsVUFBZ0IsS0FBSztRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQTtRQUNsQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDbkMsQ0FBQzs7Z0JBdkNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLGlRQVNUOzZCQUNRLG1TQWdCUjtpQkFDRjs7O3dCQUVFLEtBQUs7dUJBQ0wsS0FBSzs4QkFDTCxNQUFNOztJQU9ULDBCQUFDO0NBQUEsQUF4Q0QsSUF3Q0M7U0FWWSxtQkFBbUI7OztJQUM5QixvQ0FBNkI7O0lBQzdCLG1DQUFxQzs7SUFDckMsMENBQW9FOztJQUVwRSxxQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2NoYXQtY29uZmlnJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8ZGl2IGNsYXNzPVwiY2hhdC1jb25maWdcIj5cbiAgICAgIHt7dGV4dH19XG4gICAgICA8YnV0dG9uICpuZ0Zvcj1cImxldCBpdGVtIG9mIHRoZW1lc1wiXG4gICAgICAgICAgICAgIGNsYXNzPVwiYnRuXCIgW2NsYXNzLmJ0bi1hY3RpdmVdPVwiaXRlbSA9PT0gdGhlbWVcIlxuICAgICAgICAgICAgICAoY2xpY2spPVwic2V0VGhlbWUoaXRlbSlcIj5cbiAgICAgICAge3tpdGVtfX1cbiAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtgXG4gICAgLmNoYXQtY29uZmlnIHtcbiAgICAgIHBhZGRpbmc6IDIwcHg7XG4gICAgfVxuICAgIC5idG4ge1xuICAgICAgcGFkZGluZzogNXB4O1xuICAgICAgbWFyZ2luOiAwcHggMnB4O1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgI2RlZGVkZTtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuICAgIC5idG4tYWN0aXZlIHtcbiAgICAgIGJvcmRlcjogMXB4IHNvbGlkICNhMGEwYTA7XG4gICAgfVxuICAgIC5idG46Zm9jdXMge1xuICAgICAgYm9yZGVyOiAxcHggc29saWQgIzMzMztcbiAgICB9XG4gIGBdLFxufSlcbmV4cG9ydCBjbGFzcyBDaGF0Q29uZmlnQ29tcG9uZW50IHtcbiAgQElucHV0KCkgcHVibGljIHRoZW1lOiBzdHJpbmdcbiAgQElucHV0KCkgcHVibGljIHRleHQgPSAnU2VsZWN0IHRoZW1lJ1xuICBAT3V0cHV0KCkgcHVibGljIHRoZW1lQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKVxuXG4gIHB1YmxpYyB0aGVtZXMgPSBbJ2JsdWUnLCAnZ3JleScsICdyZWQnXVxuICBwdWJsaWMgc2V0VGhlbWUodGhlbWUpIHtcbiAgICB0aGlzLnRoZW1lID0gdGhlbWVcbiAgICB0aGlzLnRoZW1lQ2hhbmdlLmVtaXQodGhpcy50aGVtZSlcbiAgfVxufVxuIl19