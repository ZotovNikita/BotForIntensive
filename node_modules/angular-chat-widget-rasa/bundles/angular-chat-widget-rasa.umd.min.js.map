{"version":3,"sources":["ng://angular-chat-widget-rasa/lib/chat-avatar/chat-avatar.component.ts","ng://angular-chat-widget-rasa/lib/animations.ts","ng://angular-chat-widget-rasa/lib/chatbot-rasa.service.ts","ng://angular-chat-widget-rasa/lib/chat-widget/chat-widget.component.ts","ng://angular-chat-widget-rasa/lib/chat-input/chat-input.component.ts","ng://angular-chat-widget-rasa/lib/chat-config/chat-config.component.ts","ng://angular-chat-widget-rasa/lib/chatbot-rasa.module.ts"],"names":["ChatAvatarComponent","Component","args","selector","template","Input","fadeInOut","trigger","transition","style","opacity","animate","fadeIn","ChatService","_this","this","getMessages","Observable","create","observer","socket","on","message","next","prototype","connect","url","io","emit","session_id","id","remote_id","error","console","log","reason","sendMessage","Injectable","providedIn","ChatWidgetComponent","chatService","theme","botName","botAvatar","userAvatar","startingMessage","opened","_visible","focus","Subject","messages","Object","defineProperty","visible","setTimeout","scrollToBottom","focusMessage","addMessage","from","text","type","unshift","date","Date","getTime","bottom","undefined","nativeElement","scrollIntoView","ngOnInit","client","name","status","avatar","operator","subscribe","toggleChat","_a","trim","handleKeyboardEvent","event","key","animations","ViewChild","HostListener","ChatInputComponent","buttonText","EventEmitter","send","dismiss","getMessage","value","clearMessage","onSubmit","encapsulation","ViewEncapsulation","None","Output","ChatConfigComponent","themeChange","themes","setTheme","ChatbotRasaModule","NgModule","imports","CommonModule","BrowserAnimationsModule","declarations","exports","entryComponents","providers"],"mappings":"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","sourcesContent":["import { Component, Input } from '@angular/core'\n\n@Component({\n  selector: 'chat-avatar',\n  template: `\n    <img [attr.src]=\"image\" class=\"avatar\" />\n  `,\n  styles: [`\n    .avatar {\n      height: 30px;\n      width: 30px;\n      border-radius: 50%;\n      float: left;\n      margin-right: 10px;\n    }\n  `]\n})\nexport class ChatAvatarComponent {\n  @Input() public image: string\n}\n","import { animate, style, transition, trigger } from '@angular/animations'\n\nexport const fadeInOut = trigger('fadeInOut', [\n  transition(':enter', [\n    style({opacity: 0}),\n    animate(250 )\n  ]),\n  transition('* => void', [\n    animate(250, style({\n      opacity: 0,\n    }))\n  ])\n])\n\nexport const fadeIn = trigger('fadeIn', [\n  transition(':enter', [\n    style({opacity: 0}),\n    animate(500 )\n  ]),\n  transition(':leave', [\n    style({opacity: 0}),\n    animate(1 )\n  ]),\n])\n","import { Injectable } from '@angular/core';\nimport io from 'socket.io-client';\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n  private socket;\n\n  constructor() {\n\n  }\n\n  public connect(url: string){\n    this.socket = io(url);\n    this.socket.on('connect', () => {\n      this.socket.emit('session_request', {'session_id':this.socket.id})\n    });\n    this.socket.on('session_confirm', (remote_id) => {\n    })\n    this.socket.on('connect_error', (error) => {\n      console.log(error);\n    });\n\n    this.socket.on('error', (error) => {\n      console.log(error);\n    });\n\n    this.socket.on('disconnect', (reason) => {\n      console.log(reason);\n    });\n  }\n\n  public sendMessage(message) {\n    this.socket.emit('user_uttered', {'message':message});\n  }\n\n  public getMessages = () => {\n        return Observable.create((observer) => {\n            this.socket.on('bot_uttered', (message) => {\n                observer.next(message);\n            });\n        });\n  }\n}\n","import { Component, ElementRef, HostListener, Input, OnInit, ViewChild } from '@angular/core'\nimport { Subject } from 'rxjs'\nimport { fadeIn, fadeInOut } from '../animations'\nimport { ChatService } from '../chatbot-rasa.service';\n\nconst rand = max => Math.floor(Math.random() * max)\n\n@Component({\n  selector: 'chat-widget',\n  templateUrl: './chat-widget.component.html',\n  styleUrls: ['./chat-widget.component.css'],\n  animations: [fadeInOut, fadeIn],\n})\nexport class ChatWidgetComponent implements OnInit {\n  @ViewChild('bottom') bottom: ElementRef\n  @Input() public theme: 'blue' | 'grey' | 'red' = 'blue'\n  @Input() public botName: string = 'Bot';\n  @Input() public botAvatar: string = `https://cdn.dribbble.com/users/275794/screenshots/3128598/gbot_800.png`\n  @Input() public userAvatar: string = `https://storage.proboards.com/6172192/images/gKhXFw_5W0SD4nwuMev1.png`\n  @Input() public url: string = 'http://localhost:5002'\n  @Input() public startingMessage: string = 'Hi, how can we help you?'\n  @Input() public opened: boolean = true\n\n  public _visible = false\n\n  private chatService: ChatService;\n\n  constructor(chatService: ChatService) {\n    this.chatService = chatService;\n    this.chatService.connect(this.url);\n  }\n\n  public get visible() {\n    return this._visible\n  }\n\n  @Input() public set visible(visible) {\n    this._visible = visible\n    if (this._visible) {\n      setTimeout(() => {\n        this.scrollToBottom()\n        this.focusMessage()\n      }, 0)\n    }\n  }\n\n  public focus = new Subject()\n\n  public operator;\n\n  public client;\n\n  public messages = []\n\n  public addMessage(from, text, type: 'received' | 'sent') {\n    this.messages.unshift({\n      from,\n      text,\n      type,\n      date: new Date().getTime(),\n    })\n    this.scrollToBottom()\n  }\n\n  public scrollToBottom() {\n    if (this.bottom !== undefined) {\n      this.bottom.nativeElement.scrollIntoView()\n    }\n  }\n\n  public focusMessage() {\n    this.focus.next(true)\n  }\n\n  ngOnInit() {\n    this.client = {\n      name: 'Guest User',\n      status: 'online',\n      avatar: this.userAvatar,\n    };\n\n    this.operator  = {\n      name: this.botName,\n      status: 'online',\n      avatar: this.botAvatar,\n    };\n    if(this.opened){\n      setTimeout(() => this.visible = true, 1000)\n    }\n    setTimeout(() => {\n      this.addMessage(this.operator, this.startingMessage, 'received')\n    }, 1500)\n    this.chatService\n      .getMessages()\n      .subscribe((message) => {\n        setTimeout(()=> {this.addMessage(this.operator, message.text, 'received')},1000);\n      });\n  }\n\n  public toggleChat() {\n    this.visible = !this.visible\n  }\n\n  public sendMessage({ message }) {\n    if (message.trim() === '') {\n      return\n    }\n    this.addMessage(this.client, message, 'sent')\n    this.chatService.sendMessage(message)\n  }\n\n  @HostListener('document:keypress', ['$event'])\n  handleKeyboardEvent(event: KeyboardEvent) {\n    if (event.key === '/') {\n      this.focusMessage()\n    }\n    if (event.key === '?' && !this._visible) {\n      this.toggleChat()\n    }\n  }\n\n}\n","import { Component, ElementRef, EventEmitter, Input, OnInit, Output, ViewChild, ViewEncapsulation } from '@angular/core'\n\n@Component({\n  selector: 'chat-input',\n  template: `\n    <textarea type=\"text\" class=\"chat-input-text\" placeholder=\"Type message...\"\n              #message (keydown.enter)=\"onSubmit()\" (keyup.enter)=\"message.value = ''\" (keyup.escape)=\"dismiss.emit()\"></textarea>\n    <button type=\"submit\" class=\"chat-input-submit\" (click)=\"onSubmit()\">\n      {{buttonText}}\n    </button>\n  `,\n  encapsulation: ViewEncapsulation.None,\n  styleUrls: ['./chat-input.component.css'],\n})\nexport class ChatInputComponent implements OnInit {\n  @Input() public buttonText = 'â©ï¸'\n  @Input() public focus = new EventEmitter()\n  @Output() public send = new EventEmitter()\n  @Output() public dismiss = new EventEmitter()\n  @ViewChild('message') message: ElementRef\n\n  ngOnInit() {\n    this.focus.subscribe(() => this.focusMessage())\n  }\n\n  public focusMessage() {\n    this.message.nativeElement.focus()\n  }\n\n  public getMessage() {\n    return this.message.nativeElement.value\n  }\n\n  public clearMessage() {\n    this.message.nativeElement.value = ''\n  }\n\n  onSubmit() {\n    const message = this.getMessage()\n    if (message.trim() === '') {\n      return\n    }\n    this.send.emit({ message })\n    this.clearMessage()\n    this.focusMessage()\n  }\n\n}\n","import { Component, EventEmitter, Input, Output } from '@angular/core'\n\n@Component({\n  selector: 'chat-config',\n  template: `\n    <div class=\"chat-config\">\n      {{text}}\n      <button *ngFor=\"let item of themes\"\n              class=\"btn\" [class.btn-active]=\"item === theme\"\n              (click)=\"setTheme(item)\">\n        {{item}}\n      </button>\n    </div>\n  `,\n  styles: [`\n    .chat-config {\n      padding: 20px;\n    }\n    .btn {\n      padding: 5px;\n      margin: 0px 2px;\n      border: 1px solid #dedede;\n      outline: none;\n    }\n    .btn-active {\n      border: 1px solid #a0a0a0;\n    }\n    .btn:focus {\n      border: 1px solid #333;\n    }\n  `],\n})\nexport class ChatConfigComponent {\n  @Input() public theme: string\n  @Input() public text = 'Select theme'\n  @Output() public themeChange: EventEmitter<any> = new EventEmitter()\n\n  public themes = ['blue', 'grey', 'red']\n  public setTheme(theme) {\n    this.theme = theme\n    this.themeChange.emit(this.theme)\n  }\n}\n","import { NgModule } from '@angular/core'\nimport { CommonModule } from '@angular/common'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { ChatAvatarComponent } from './chat-avatar/chat-avatar.component'\nimport { ChatWidgetComponent } from './chat-widget/chat-widget.component'\nimport { ChatInputComponent } from './chat-input/chat-input.component'\nimport { ChatConfigComponent } from './chat-config/chat-config.component'\nimport { ChatService } from './chatbot-rasa.service';\n\n@NgModule({\n  imports: [CommonModule, BrowserAnimationsModule],\n  declarations: [ChatAvatarComponent, ChatWidgetComponent, ChatInputComponent, ChatConfigComponent],\n  exports: [ChatWidgetComponent, ChatConfigComponent],\n  entryComponents: [ChatWidgetComponent, ChatConfigComponent],\n  providers: [ChatService]\n})\nexport class ChatbotRasaModule { }\n"]}